{
  "TASK_MARSHAL": {
    "instillShortDescription": "Convert JSON to a string",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "json"
      ],
      "instillUIOrder": 0,
      "properties": {
        "json": {
          "description": "JSON entity to be marshaled. It can be any valid JSON datatype (e.g. number, string, hash, array).",
          "instillShortDescription": "JSON entity to be marshaled",
          "instillAcceptFormats": [
            "object",
            "semi-structured/*",
            "structured/*"
          ],
          "instillEditOnNodeFields": [],
          "instillUIOrder": 0,
          "instillUpstreamTypes": [
            "reference"
          ],
          "required": [],
          "title": "JSON"
        }
      },
      "required": [
        "json"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillEditOnNodeFields": [
        "string"
      ],
      "instillUIOrder": 0,
      "properties": {
        "string": {
          "description": "String representation of the JSON input",
          "instillFormat": "string",
          "instillUIMultiline": true,
          "instillUIOrder": 0,
          "title": "JSON string",
          "type": "string"
        }
      },
      "required": [
        "string"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_UNMARSHAL": {
    "instillShortDescription": "Convert a string to JSON",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "string"
      ],
      "instillUIOrder": 0,
      "properties": {
        "string": {
          "description": "JSON string to be unmarshaled. It can represent any valid JSON datatype (e.g. number, string, hash, array).",
          "instillShortDescription": "JSON string to be unmarshaled",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 0,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "String",
          "type": "string"
        }
      },
      "required": [
        "string"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillEditOnNodeFields": [
        "json"
      ],
      "instillUIOrder": 0,
      "properties": {
        "json": {
          "description": "JSON entity extracted from the string input",
          "instillEditOnNodeFields": [],
          "instillFormat": "semi-structured/json",
          "instillUIOrder": 0,
          "required": [],
          "title": "JSON"
        }
      },
      "required": [
        "json"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_JQ": {
    "instillShortDescription": "Process JSON through a `jq` command",
    "title": "jq",
    "input": {
      "description": "Source JSON and `jq` command",
      "instillUIOrder": 0,
      "properties": {
        "json-string": {
          "deprecated": true,
          "instillUIOrder": 2,
          "description": "(DEPRECATED, use 'JSON value' instead) String with the JSON value to be processed. This field allows templated inputs, but the data might require preprocessing (marshalling). This field will be used in absence of 'JSON value' for backwards compatibility reasons.",
          "instillShortDescription": "(DEPRECATED) JSON string to be processed",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "instillUIMultiline": true,
          "title": "(DEPRECATED) JSON string",
          "type": "string"
        },
        "json-value": {
          "instillUIOrder": 0,
          "description": "JSON entity to be processed by the filter. It can be any valid JSON datatype (e.g. number, string, hash, array).",
          "instillAcceptFormats": [
            "object",
            "structured/*",
            "semi-structured/*"
          ],
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "instillUIMultiline": true,
          "title": "JSON value"
        },
        "jq-filter": {
          "instillUIOrder": 1,
          "description": "Filter, in `jq` syntax, that will be applied to the JSON input",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "instillUIMultiline": true,
          "title": "Filter",
          "type": "string"
        }
      },
      "required": [
        "jq-filter"
      ],
      "instillEditOnNodeFields": [
        "json-value",
        "jq-filter"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Results of the `jq` command applied to the input JSON",
      "instillUIOrder": 0,
      "properties": {
        "results": {
          "description": "The `jq` command results",
          "instillEditOnNodeFields": [],
          "instillUIOrder": 0,
          "required": [],
          "title": "Results",
          "type": "array",
          "instillFormat": "array:semi-structured/json",
          "items": {
            "title": "Result",
            "instillFormat": "semi-structured/json"
          }
        }
      },
      "required": [
        "results"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_EDIT_VALUES": {
    "instillShortDescription": "Edit values in a JSON object.",
    "title": "Edit Values",
    "input": {
      "description": "Input",
      "instillUIOrder": 0,
      "properties": {
        "json": {
          "description": "JSON object to be edited. It can be any valid JSON datatype (e.g. number, string, hash, array).",
          "instillShortDescription": "JSON object to be edited.",
          "instillAcceptFormats": [
            "object",
            "semi-structured/*",
            "structured/*"
          ],
          "instillUIOrder": 0,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "required": [],
          "title": "JSON"
        },
        "updates": {
          "description": "Array of updates to be applied to the JSON object.",
          "instillShortDescription": "Array of updates to be applied.",
          "instillUIOrder": 1,
          "instillAcceptFormats": [
            "array:object"
          ],
          "items": {
            "description": "Update to be applied to the JSON object.",
            "instillShortDescription": "Update to be applied.",
            "properties": {
              "field": {
                "description": "The field in the original data whose value needs to be updated, it supports nested paths with using dot. For example, 'a.b.c' to get the data in the 'c' field of the 'b' field of the 'a' field.",
                "instillShortDescription": "Path to the value to be updated.",
                "instillAcceptFormats": [
                  "string",
                  "array"
                ],
                "instillUIOrder": 0,
                "title": "Field",
                "type": "string"
              },
              "value": {
                "description": "The new value that will replace the current value at the specified field.",
                "instillShortDescription": "New value to be set.",
                "instillAcceptFormats": [
                  "*/*"
                ],
                "instillUIOrder": 1,
                "title": "Value",
                "type": "string"
              }
            },
            "required": [
              "field",
              "value"
            ],
            "title": "Update",
            "type": "object"
          },
          "title": "Updates",
          "type": "array"
        },
        "conflict-resolution": {
          "description": "Defines how to handle cases where the field does not exist in the data.",
          "instillShortDescription": "Conflict resolution strategy.",
          "instillUIOrder": 2,
          "title": "Conflict Resolution",
          "type": "string",
          "enum": ["create", "skip", "error"],
          "default": "skip"
        }
      },
      "required": [
        "json",
        "update-values"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 1,
      "properties": {
        "json": {
          "description": "JSON object with the updated values",
          "instillFormat": "semi-structured/json",
          "instillUIOrder": 0,
          "required": [],
          "title": "JSON"
        }
      },
      "required": [
        "json"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_RENAME_FIELDS": {
    "instillShortDescription": "Rename fields in a JSON object.",
    "title": "Rename Fields",
    "input": {
      "description": "Input",
      "instillUIOrder": 0,
      "properties": {
        "json": {
          "description": "JSON object to be edited. It can be any valid JSON datatype (e.g. number, string, hash, array).",
          "instillShortDescription": "JSON object to be edited.",
          "instillAcceptFormats": [
            "object",
            "semi-structured/*",
            "structured/*"
          ],
          "instillUIOrder": 0,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "required": [],
          "title": "JSON"
        },
        "fields": {
          "description": "An array of objects specifying the fields to be renamed.",
          "instillShortDescription": "Array of fields to be renamed.",
          "instillUIOrder": 1,
          "instillAcceptFormats": [
            "array:object"
          ],
          "items": {
            "description": "Field to be renamed.",
            "instillShortDescription": "Field to be renamed.",
            "properties": {
              "from": {
                "description": "The field in the original data that needs to be renamed.",
                "instillShortDescription": "Field to be renamed.",
                "instillAcceptFormats": [
                  "string"
                ],
                "instillUIOrder": 0,
                "title": "From",
                "type": "string"
              },
              "to": {
                "description": "The new name for the field.",
                "instillShortDescription": "New name for the field.",
                "instillAcceptFormats": [
                  "string"
                ],
                "instillUIOrder": 1,
                "title": "To",
                "type": "string"
              }
            },
            "required": [
              "from",
              "to"
            ],
            "title": "Field",
            "type": "object"
          },
          "title": "Fields",
          "type": "array"
        },
        "conflict-resolution": {
          "description": "Defines how conflicts are handled when the newField already exists in the data.",
          "instillShortDescription": "Conflict resolution strategy.",
          "instillUIOrder": 2,
          "title": "Conflict Resolution",
          "type": "string",
          "enum": ["overwrite", "skip", "error"],
          "default": "overwrite"
        }
      },
      "required": [
        "json",
        "fields"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 1,
      "properties": {
        "json": {
          "description": "JSON object with the renamed fields.",
          "instillFormat": "semi-structured/json",
          "instillUIOrder": 0,
          "required": [],
          "title": "JSON"
        }
      },
      "required": [
        "json"
      ],
      "title": "Output",
      "type": "object"
    }
  }
}
